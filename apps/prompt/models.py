from django.db import models

from apps.core.models import Base
from apps.workspace.models import Workspace
from tagging.registry import register

class Prompt(Base):
    title = models.CharField(max_length=255)  # Title of the prompt
    system_message = models.TextField()  # System-generated message
    user_message = models.TextField()  # User input message
    output = models.TextField()  # Output generated by the prompt
    bookmarked = models.BooleanField(default=False)  # Is the prompt bookmarked
    saved = models.BooleanField(default=False)  # Is the prompt saved
    library = models.BooleanField(default=False)
    temperature = models.DecimalField(max_digits=5, decimal_places=2, default=1)  # Temperature for text generation
    maximum_length = models.PositiveIntegerField(default=256)  # Maximum length of generated text
    stop_sequence = models.CharField(max_length=255, default='0')  # Stop sequence for text generation
    top_p = models.DecimalField(max_digits=5, decimal_places=2, default=1)  # Top-p value for text generation
    frequency_penalty = models.DecimalField(max_digits=5, decimal_places=2, default=0)  # Frequency penalty
    presence_penalty = models.DecimalField(max_digits=5, decimal_places=2, default=0)  # Presence penalty
    logit_bias = models.DecimalField(max_digits=5, decimal_places=2, default=0)  # Logit bias
    
    # Self-referential foreign key to associate with another prompt
    history_prompt = models.ForeignKey(
        'self',  # 'self' refers to the same model (Prompt)
        on_delete=models.CASCADE,
        related_name='main_prompts',  # For accessing main prompts from history prompts
        blank=True,  # Allows for null values, indicating that it's a main prompt
        null=True
    )

    workspace = models.ForeignKey(
        Workspace,  # ForeignKey to associate with a Workspace
        on_delete=models.SET_NULL,  # Set workspace to NULL when deleted
        related_name='prompts',  # For accessing prompts in a workspace
        blank=True,  # Allows for null values, indicating that it's not associated with a workspace
        null=True
    )

    # Self-referential foreign key to associate with another prompt
    # Keep in mind that you should carefully manage the relationships to avoid circular references and ensure consistency in your data.
    history_prompt = models.ForeignKey(
        'self',  # 'self' refers to the same model (Prompt)
        on_delete=models.CASCADE,
        related_name='main_prompts',  # For accessing main prompts from history prompts
        blank=True,  # Allows for null values, indicating that it's a main prompt
        null=True
    )

    def __str__(self):
        return self.title

# this will tags to prompts
register(Prompt)